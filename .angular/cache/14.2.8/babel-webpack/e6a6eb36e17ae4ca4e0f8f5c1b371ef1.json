{"ast":null,"code":"import { FormArray, FormControl, FormGroup, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\n\nfunction AppComponent_span_9_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \" This name is invalid! \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction AppComponent_span_9_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \" This field is required! \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction AppComponent_span_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 16);\n    i0.ɵɵtemplate(1, AppComponent_span_9_span_1_Template, 2, 0, \"span\", 17);\n    i0.ɵɵtemplate(2, AppComponent_span_9_span_2_Template, 2, 0, \"span\", 17);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.signupForm.get(\"userData.username\").errors[\"nameisForbidden\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.signupForm.get(\"userData.username\").errors[\"required\"]);\n  }\n}\n\nfunction AppComponent_span_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 16);\n    i0.ɵɵtext(1, \"Please enter a valid email! \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction AppComponent_div_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 18)(1, \"label\");\n    i0.ɵɵelement(2, \"input\", 19);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const gender_r7 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"value\", gender_r7);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", gender_r7, \" \");\n  }\n}\n\nfunction AppComponent_div_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 5);\n    i0.ɵɵelement(1, \"input\", 20);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const i_r9 = ctx.index;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formControlName\", i_r9);\n  }\n}\n\nfunction AppComponent_span_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 16);\n    i0.ɵɵtext(1, \"Please enter valid data! \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nexport class AppComponent {\n  constructor() {\n    this.genders = ['male', 'female'];\n    this.forbiddenUsernames = ['Chris', 'Anna'];\n  }\n\n  ngOnInit() {\n    this.signupForm = new FormGroup({\n      // now adding form controls - key/value pairs\n      'gender': new FormControl('female'),\n      // creating a form group within the main form group\n      'userData': new FormGroup({\n        'username': new FormControl(null, [Validators.required, this.forbiddenNames.bind(this)]),\n        'email': new FormControl(null, [Validators.required, Validators.email], this.forbiddenEmails) // if multiple validators use an array; asynchronous validators are their own separate parameter\n\n      }),\n      // form array - holds an array of controls\n      'hobbies': new FormArray([])\n    }); // Tracking Value Changes\n    // this.signupForm.valueChanges.subscribe(\n    //   (value) => {\n    //     console.log(value);\n    //   }\n    // );\n    // Tracking Status Changes\n    // this.signupForm.statusChanges.subscribe(\n    //   (status) => {\n    //     console.log(status);\n    //   }\n    // );\n    // Setting Values - for defining values for the entire form\n    // this.signupForm.setValue({\n    //   'userData': {\n    //     'username': 'Max',\n    //     'email': 'max@test.com'\n    //   },\n    //   'gender': 'male',\n    //   'hobbies': []\n    // });\n    // Patching Values - for defining values for specific parts of form\n    // this.signupForm.patchValue({\n    //   'userData': {\n    //     'username': 'Max',\n    //   },\n    //   'gender': 'male',\n    // });\n  }\n\n  onSubmit() {\n    console.log(this.signupForm);\n    this.signupForm.reset(); // resets form on submission\n    // can also pass an object to reset so it only resets specific values rather than the whole form\n  }\n\n  onAddHobby() {\n    const control = new FormControl(null, Validators.required);\n    this.signupForm.get('hobbies').push(control); // have to cast to form array\n  }\n\n  getControls() {\n    return this.signupForm.get('hobbies').controls;\n  } // creating our own validator - takes in a form control and returns an object with a key name that has a value of either true or false\n\n\n  forbiddenNames(control) {\n    if (this.forbiddenUsernames.indexOf(control.value) !== -1) {\n      // if the input from the formControl matches any of the values in our forbiddenUsernames array\n      return {\n        'nameisForbidden': true\n      };\n    } // otherwise indexOf returns -1 if it doesn't find the string in the array\n    else {\n      // if validation is sucessfull you need to return nothing or null!\n      return null;\n    }\n  } // creating a custom asynchronous validator\n\n\n  forbiddenEmails(control) {\n    const promise = new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (control.value === 'test@test.com') {\n          resolve({\n            'emailIsForbidden': true\n          });\n        } else {\n          resolve(null);\n        }\n      }, 1500);\n    });\n    return promise;\n  }\n\n}\n\nAppComponent.ɵfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)();\n};\n\nAppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-root\"]],\n  decls: 25,\n  vars: 6,\n  consts: [[1, \"container\"], [1, \"row\"], [1, \"col-xs-12\", \"col-sm-10\", \"col-md-8\", \"col-sm-offset-1\", \"col-md-offset-2\"], [3, \"formGroup\", \"ngSubmit\"], [\"formGroupName\", \"userData\"], [1, \"form-group\"], [\"for\", \"username\"], [\"type\", \"text\", \"id\", \"username\", \"formControlName\", \"username\", 1, \"form-control\"], [\"class\", \"help-block\", 4, \"ngIf\"], [\"for\", \"email\"], [\"type\", \"text\", \"id\", \"email\", \"formControlName\", \"email\", 1, \"form-control\"], [\"class\", \"radio\", 4, \"ngFor\", \"ngForOf\"], [\"formArrayName\", \"hobbies\"], [\"type\", \"button\", 1, \"btn\", \"btn-default\", 3, \"click\"], [\"class\", \"form-group\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"], [1, \"help-block\"], [4, \"ngIf\"], [1, \"radio\"], [\"type\", \"radio\", \"formControlName\", \"gender\", 3, \"value\"], [\"type\", \"text\", 1, \"form-control\", 3, \"formControlName\"]],\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"form\", 3);\n      i0.ɵɵlistener(\"ngSubmit\", function AppComponent_Template_form_ngSubmit_3_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(4, \"div\", 4)(5, \"div\", 5)(6, \"label\", 6);\n      i0.ɵɵtext(7, \"Username\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(8, \"input\", 7);\n      i0.ɵɵtemplate(9, AppComponent_span_9_Template, 3, 2, \"span\", 8);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"div\", 5)(11, \"label\", 9);\n      i0.ɵɵtext(12, \"email\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(13, \"input\", 10);\n      i0.ɵɵtemplate(14, AppComponent_span_14_Template, 2, 0, \"span\", 8);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(15, AppComponent_div_15_Template, 4, 2, \"div\", 11);\n      i0.ɵɵelementStart(16, \"div\", 12)(17, \"h4\");\n      i0.ɵɵtext(18, \"Your Hobbies\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(19, \"button\", 13);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_19_listener() {\n        return ctx.onAddHobby();\n      });\n      i0.ɵɵtext(20, \"Add Hobby\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(21, AppComponent_div_21_Template, 2, 1, \"div\", 14);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(22, AppComponent_span_22_Template, 2, 0, \"span\", 8);\n      i0.ɵɵelementStart(23, \"button\", 15);\n      i0.ɵɵtext(24, \"Submit\");\n      i0.ɵɵelementEnd()()()()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"formGroup\", ctx.signupForm);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngIf\", !ctx.signupForm.get(\"userData.username\").valid && ctx.signupForm.get(\"userData.username\").touched);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", !ctx.signupForm.get(\"userData.email\").valid && ctx.signupForm.get(\"userData.email\").touched);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.genders);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngForOf\", ctx.getControls());\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.signupForm.valid && ctx.signupForm.touched);\n    }\n  },\n  dependencies: [i1.NgForOf, i1.NgIf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.RadioControlValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName, i2.FormGroupName, i2.FormArrayName],\n  styles: [\".container[_ngcontent-%COMP%] {\\n  margin-top: 30px;\\n}\\n\\ninput.ng-invalid.ng-touched[_ngcontent-%COMP%]{\\n  border: 1px solid red;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UscUJBQXFCO0FBQ3ZCIiwiZmlsZSI6ImFwcC5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmNvbnRhaW5lciB7XG4gIG1hcmdpbi10b3A6IDMwcHg7XG59XG5cbmlucHV0Lm5nLWludmFsaWQubmctdG91Y2hlZHtcbiAgYm9yZGVyOiAxcHggc29saWQgcmVkO1xufVxuIl19 */\"]\n});","map":{"version":3,"mappings":"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","names":["FormArray","FormControl","FormGroup","Validators","i0","AppComponent","constructor","ngOnInit","signupForm","required","forbiddenNames","bind","email","forbiddenEmails","onSubmit","console","log","reset","onAddHobby","control","get","push","getControls","controls","forbiddenUsernames","indexOf","value","promise","Promise","resolve","reject","setTimeout","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/Users/destinyboone/Desktop/Coding/Practice Projects/angularSandbox_forms-reactive/src/app/app.component.ts","/Users/destinyboone/Desktop/Coding/Practice Projects/angularSandbox_forms-reactive/src/app/app.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormArray, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit{\n  genders = ['male', 'female'];\n  signupForm: FormGroup;\n  forbiddenUsernames = ['Chris', 'Anna'];\n\n  ngOnInit(){\n    this.signupForm = new FormGroup({ // creates a form\n      // now adding form controls - key/value pairs\n      'gender': new FormControl('female'), // can set a default rather than choosing null\n\n      // creating a form group within the main form group\n      'userData': new FormGroup({                                                   // need to bind this for it to work because the validator gets called by Angular rather than inside the typescript file\n        'username': new FormControl(null, [Validators.required, this.forbiddenNames.bind(this)]), // form control is done here rather than in the html file by using Validators\n        'email': new FormControl(null, [Validators.required, Validators.email], this.forbiddenEmails), // if multiple validators use an array; asynchronous validators are their own separate parameter\n      }),\n\n      // form array - holds an array of controls\n      'hobbies': new FormArray([])\n    });\n\n    // Tracking Value Changes\n    // this.signupForm.valueChanges.subscribe(\n    //   (value) => {\n    //     console.log(value);\n    //   }\n    // );\n\n    // Tracking Status Changes\n    // this.signupForm.statusChanges.subscribe(\n    //   (status) => {\n    //     console.log(status);\n    //   }\n    // );\n\n    // Setting Values - for defining values for the entire form\n    // this.signupForm.setValue({\n    //   'userData': {\n    //     'username': 'Max',\n    //     'email': 'max@test.com'\n    //   },\n    //   'gender': 'male',\n    //   'hobbies': []\n    // });\n\n    // Patching Values - for defining values for specific parts of form\n    // this.signupForm.patchValue({\n    //   'userData': {\n    //     'username': 'Max',\n    //   },\n    //   'gender': 'male',\n    // });\n  }\n\n  onSubmit(){\n    console.log(this.signupForm);\n    this.signupForm.reset(); // resets form on submission\n    // can also pass an object to reset so it only resets specific values rather than the whole form\n  }\n\n  onAddHobby(){ // this method creates a new form control with no default input (null) and pushes it onto our hobbies Form Array\n    const control = new FormControl(null, Validators.required);\n    (<FormArray>this.signupForm.get('hobbies')).push(control); // have to cast to form array\n  }\n\n  getControls(){\n    return (<FormArray>this.signupForm.get('hobbies')).controls;\n  }\n\n  // creating our own validator - takes in a form control and returns an object with a key name that has a value of either true or false\n  forbiddenNames(control: FormControl): {[s: string] : boolean} \n  {\n    if(this.forbiddenUsernames.indexOf(control.value) !== -1){ // if the input from the formControl matches any of the values in our forbiddenUsernames array\n      return {'nameisForbidden': true};\n    } // otherwise indexOf returns -1 if it doesn't find the string in the array\n    else{ // if validation is sucessfull you need to return nothing or null!\n      return null\n    }\n  }\n\n  // creating a custom asynchronous validator\n  forbiddenEmails(control: FormControl): Promise<any> | Observable<any>{\n    const promise = new Promise<any>((resolve, reject) => {\n      setTimeout(() => {\n        if(control.value === 'test@test.com'){\n          resolve({'emailIsForbidden': true});\n        }\n        else{\n          resolve(null);\n        }\n      }, 1500)\n    });\n\n    return promise;\n  }\n}\n","<div class=\"container\">\n  <div class=\"row\">\n    <div class=\"col-xs-12 col-sm-10 col-md-8 col-sm-offset-1 col-md-offset-2\">\n      <!-- tells Angular to take our created form rather than create one automatically -->\n      <form [formGroup]=\"signupForm\" (ngSubmit)=\"onSubmit()\">\n        <div formGroupName=\"userData\"> <!-- grouping username and email inputs together into a 'userData' FormGroup within the main signupForm FormGroup -->\n          <div class=\"form-group\">\n            <label for=\"username\">Username</label>\n            <!-- linking each input to the controls in our form in the ts file using formControlName-->\n            <input\n              type=\"text\"\n              id=\"username\"\n              formControlName=\"username\"\n              class=\"form-control\">\n              <!-- the spans will only show if person has clicked the field but has given invalid input -->\n              <!-- need to update the paths for get since this input is now nested-->\n            <span\n            *ngIf=\"!signupForm.get('userData.username').valid && signupForm.get('userData.username').touched\"\n            class=\"help-block\">\n              <!-- nesting some spans within the larger one since there are multiple different types of errors that could occur here now -->\n              <span *ngIf=\"signupForm.get('userData.username').errors['nameisForbidden']\">\n                This name is invalid!\n              </span>\n              <span *ngIf=\"signupForm.get('userData.username').errors['required']\">\n                This field is required!\n              </span>\n            </span>\n          </div>\n          <div class=\"form-group\">\n            <label for=\"email\">email</label>\n            <input\n              type=\"text\"\n              id=\"email\"\n              formControlName=\"email\"\n              class=\"form-control\">\n              <!-- need to update the paths for get since this input is now nested-->\n            <span\n            *ngIf=\"!signupForm.get('userData.email').valid && signupForm.get('userData.email').touched\"\n            class=\"help-block\">Please enter a valid email!\n            </span>\n          </div>\n        </div>\n        <div class=\"radio\" *ngFor=\"let gender of genders\">\n          <label>\n            <input\n              type=\"radio\"\n              formControlName=\"gender\"\n              [value]=\"gender\">{{ gender }}\n          </label>\n        </div>\n        <div formArrayName=\"hobbies\"> <!-- linking our FormArray -->\n          <h4>Your Hobbies</h4>\n          <button class=\"btn btn-default\" type=\"button\" (click)=\"onAddHobby()\">Add Hobby</button>\n          <!-- loops through our hobbies FormArray from the ts file while also grabbing the index and \n            prints each new form control to the screen and giving it a name that corresponds to the index -->\n            <!-- so with each form control we add to the FormsArray using the onAddHobby method we can then\n              output it to the screen and fill it with an individual hobby when we run this ngFor and use getControls-->\n          <div class=\"form-group\" *ngFor=\"let hobbyControl of getControls(); let i = index\">\n            <input type=\"text\" class=\"form-control\" [formControlName]=\"i\">\n          </div>\n        </div>\n        <span\n          *ngIf=\"!signupForm.valid && signupForm.touched\"\n          class=\"help-block\">Please enter valid data!\n        </span>\n        <button class=\"btn btn-primary\" type=\"submit\">Submit</button>\n      </form>\n    </div>\n  </div>\n</div>\n"]},"metadata":{},"sourceType":"module"}